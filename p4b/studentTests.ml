open OUnit2
open Types
open Eval
open Utils
open TestUtils

(* create_system_test is defined in testUtils.ml

   Signature:
        starting environment -> final environment -> filename -> test_ctxt -> unit
        You give the starting + ending environments + filename, generates test case (test_ctxt -> unit)

   Optional argument for expected output defaults to "", but can be set for output testing
*)

let test_no_output =
  create_system_test [] [("n", Val_Int(0)); ("b", Val_Bool(false))] "student_inputs/no_output.c"

let test_with_output =
  let e = [("prebound", Val_Int(123))] in
  (* The optional argument `output` is used to specify expected output.
     Optional arguments are specified as `~arg_name:arg_value`.
     This optional argument defaults to "" to represent no expected output. *)
  create_system_test e e "student_inputs/with_output.c" ~output:"123\n"

(* This variable defines the testing suite.
   Add your own tests to the list following the pattern for our two example tests. *)
let suite =
  "student" >::: [
    (* Tests are listed as name -> function to use
       The test named no_output is defined to use the test_no_output test function, generated by our testUtils file. Feel free to take a look if you're interested in the details / our other test methods that may be interesting to you. *)

    "no_output" >:: test_no_output;
    "with_output" >:: test_with_output;
  ]

(* Leave this alone - this kicks off the tests when the executable is run *)
let _ = run_test_tt_main suite
